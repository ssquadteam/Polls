# Storage backend: json or postgres
storage:
  type: json
  json:
    file: polls.json
  postgres:
    # Either provide full JDBC URL, or host/port/database/user/password below
    # url: jdbc:postgresql://localhost:5432/polls?sslmode=disable
    host: localhost
    port: 5432
    database: polls
    user: postgres
    password: ""
    # Optional query string parameters, e.g. sslmode=require
    params: ""

# Book customization using MiniMessage formatting
books:
  creation:
    title: "<gradient:#7BD3EA:#2176FF>ᴘᴏʟʟ ᴄʀᴇᴀᴛᴏʀ</gradient>"
    author: "ᴘᴏʟʟꜱ"
    header: "<gray>ᴄʀᴇᴀᴛᴇ ᴀ ɴᴇᴡ ᴘᴏʟʟ</gray>\n"
    editCodeButton: "<blue>[ᴇᴅɪᴛ ᴄᴏᴅᴇ]</blue>"
    editQuestionButton: "<blue>[ᴇᴅɪᴛ qᴜᴇꜱᴛɪᴏɴ]</blue>"
    editDurationButton: "<blue>[ᴇᴅɪᴛ ᴅᴜʀᴀᴛɪᴏɴ]</blue>"
    publishButton: "<green>[ᴘᴜʙʟɪꜱʜ ᴘᴏʟʟ]</green>"
    cancelButton: "<red>[ᴄᴀɴᴄᴇʟ]</red>"
    optionButtonFormat: "<gray>[ꜱᴇᴛ ᴏᴘᴛɪᴏɴ {index}]</gray>"
    optionUnset: "<dark_gray>[ɴᴏᴛ ꜱᴇᴛ]"
    pageNote: "<gray>ꜱᴇᴛ ᴜᴘ ᴛᴏ 6 ᴏᴘᴛɪᴏɴꜱ. ᴜꜱᴇ ʙᴜᴛᴛᴏɴꜱ ᴛᴏ ᴇᴅɪᴛ.</gray>"
    nextPageNote: "<dark_gray>ᴛᴜʀɴ ᴘᴀɢᴇ ᴛᴏ ᴄᴏɴᴛɪɴᴜᴇ →</dark_gray>"
    indent: "  "
    labels:
      id: "<gray>Code:</gray>"
      question: "<gray>Question:</gray>"
      duration: "<gray>Duration:</gray>"
    autoReopen:
      enabled: true
      intervalTicks: 20
      onlyWhenIdle: true
    hover:
      code: "<gray>Click to set code</gray>"
      question: "<gray>Click to set question</gray>"
      duration: "<gray>Click to set duration</gray>"
      option: "<gray>Click to set option {index}</gray>"
      publish: "<green>Click to publish</green>"
      cancel: "<red>Click to cancel</red>"
  voting:
    title: "<gradient:#7BD3EA:#2176FF>ᴄᴏᴍᴍᴜɴɪᴛʏ ᴘᴏʟʟ</gradient>"
    author: "ᴘᴏʟʟꜱ"
    headerFormat: "<gray>q:</gray> <dark_gray>{question}</dark_gray>\n<gray>ᴄʟᴏꜱᴇꜱ:</gray> <dark_gray>{closes_at}</dark_gray>\n"
    closedMessage: "<red>ᴘᴏʟʟ ʜᴀꜱ ᴄʟᴏꜱᴇᴅ</red>"
    labels:
      question: "<gray>Q:</gray>"
      closes: "<gray>Closes:</gray>"
    maxQuestionLength: 100
    maxOptionLength: 50
    optionLineFormat: "{icon} <dark_gray>{option}</dark_gray> <gray>(ᴄʟɪᴄᴋ ᴛᴏ ᴠᴏᴛᴇ)</gray>"
    alreadyVotedLineFormat: "{icon} <dark_gray>{option}</dark_gray> <gray>(ʏᴏᴜ ᴠᴏᴛᴇᴅ)</gray>"
    rows:
      rowFormat: "%icon% <dark_gray>%question%</dark_gray> <gray>(%state%)</gray>"
    nextPageNote: "<dark_gray>Turn page to continue →</dark_gray>"
    indent: "  "
    state:
      click: "<gray>ᴄʟɪᴄᴋ ᴛᴏ ᴠᴏᴛᴇ ꜰᴏʀ %number%</gray>"
      voted: "<yellow>ʏᴏᴜ ᴠᴏᴛᴇᴅ ꜰᴏʀ %number%</yellow>"
      majority: "<green>%number% ʜᴀꜱ ᴍᴏꜱᴛ ᴠᴏᴛᴇꜱ</green>"
      click_closed: "<gray>ᴠᴏᴛɪɴɢ ᴄʟᴏꜱᴇᴅ</gray>"
      voted_closed: "<yellow>ʏᴏᴜ ᴠᴏᴛᴇᴅ ꜰᴏʀ %number%</yellow>"
      majority_closed: "<green>%number% ʜᴀᴅ ʜɪɢʜᴇꜱᴛ ᴠᴏᴛᴇꜱ</green>"
    hover:
      option: "<gray>ᴘɪᴄᴋ ᴛʜɪꜱ ᴏᴘᴛɪᴏɴ.</gray>"
      alreadyVotedOption: "<yellow>ʏᴏᴜ ᴀʟʀᴇᴀᴅʏ ᴠᴏᴛᴇᴅ</yellow>"
      question: "<gray>ᴘᴏʟʟ qᴜᴇꜱᴛɪᴏɴ</gray>"

# Customizable icons used before option text
icons:
  default:
    - "<dark_gray>1.</dark_gray>"
    - "<dark_gray>2.</dark_gray>"
    - "<dark_gray>3.</dark_gray>"
    - "<dark_gray>4.</dark_gray>"
    - "<dark_gray>5.</dark_gray>"
    - "<dark_gray>6.</dark_gray>"

# Sound customization for UX feedback
sounds:
  enabled: true
  ui:
    open_creation: "ui.button.click"
    set_value: "ui.button.click"
    error: "entity.villager.no"
    publish: "entity.player.levelup"
    cancel: "entity.item.break"
